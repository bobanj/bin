####################################################################################
#                               git                                                #
####################################################################################

# ~~~~~ Load git completion
#. ~/bin/.git-completion.bash
if [ -f $GITHOME/contrib/completion/git-completion.bash ]; then
	. $GITHOME/contrib/completion/git-completion.bash
else
	echo "warning: GITHOME is not defined."
fi

# Bash prompt (with git branch)
function prompt_char {
    git branch >/dev/null 2>/dev/null && echo '±' && return
    #if [ -d .git ]; then
    #   echo '±' && return
    #fi
    #hg root >/dev/null 2>/dev/null && echo '☿' && return
    #if [ -d .hg ]; then
    #    echo '☿' && return
    #fi
    echo ''
}

function parse_scm_dirty {
  cyan=$(tput setaf 6)
  green=$(tput setaf 2)
  yellow=$(tput setaf 3)
  reset=$(tput sgr0)
  git_branch=$(git branch 2>/dev/null| sed -n '/^\*/s/^\* //p')
  
  if [ !git rev-parse --git-dir > /dev/null 2>&1 ]; then
      return 0
  fi
  
    dirty=0
    [[ $(git diff --shortstat 2> /dev/null | tail -n1) != "" ]] && echo -n " $green$bold+$reset" && dirty=1
    [[ $(git diff --cached --shortstat 2> /dev/null | tail -n1) != "" ]] && echo -n " $yellow$bold^$reset" && dirty=1
    [[ $(git status --porcelain 2>/dev/null| grep "^??" | tail -n1) != "" ]] && echo -n " $cyan$bold?$reset" && dirty=1
    if [ $dirty -eq 0 ]; then
      echo -n " $green"
      echo -n '✓ '
      echo -n "$reset"
    fi
}


function git_blame_single_line {
  if [ $# -lt 2 ]; then
    echo "Usage:       git_blame_single_line PATTERN [ANCESTOR] FILE"
    echo ""
    echo "    example: git_blame_single_line \"class Test\" 14jk2k13^ ./path/to/file"
    echo ""
    return
  fi
  if [ $# -eq 2 ]; then
    git blame -M -C -L "/${1}/,+1" HEAD -- $2
  fi
  if [ $# -eq 3 ]; then
    git blame -M -C -L "/${1}/,+1" ${2} -- $3
  fi
}

# ==================================================================================


# ==================================================================================
#   Alias definitions
# ==================================================================================

# Temporary (I guess somehow my git installation is borked)
alias fixgitrepos="chmod 755 .git/hooks/{prepare-commit-msg,commit-msg,pre-commit}"

alias push?='git cherry -v origin'
alias gt="git status"
alias gb='git branch --color -v'
# --word-diff
alias gd='git diff --color --ignore-space-at-eol'
# Check for whitespace problems
alias gdc='git diff --check'
alias gdi='git diff --color --ignore-space-at-eol --cached'
alias gds='git diff --stat'
alias gl="git log --graph --pretty=format:'%Cred%h%Creset - %Cgreen[%an]%Creset%C(yellow)%d%Creset: %s %Cgreen(%cr)%Creset' --abbrev-commit --date=relative"
alias gly="gl --since=yesterday"
alias gls="git log --stat"
alias glm='git log --author="ssaasen" --pretty=format:"%Cblue%h%Creset %Cgreen%an%Creset %ad %s %n"'
alias gw="git whatchanged"
# Changelog style
alias glc="git log --abbrev-commit --pretty=medium "

# git-svn
alias gisc="git svn clone -s --prefix=svn/"
alias gsr="git svn rebase"

# Show a short commit stat
alias gsa="git shortlog -n -s"
# For more stat info have a look at: git clone git://repo.or.cz/gitstats.git

# Show the commit that introduced a particular file
# Usage:
#  git-file-added ./path/to/file
alias git-file-added="git log --diff-filter=A --pretty=short -- "


# show current sha1 hash (abbreviated)
alias gh="git rev-parse --short HEAD"

alias gv="git describe --long"

# git show --stat COMMIT_ID
alias gss="git show --stat"

# show a version of a file - important PATH MUST be the full path from the repository root. Local path (from sub directory) does not work! 
# git show v1.4:src/main.c

# will use HEAD to produce a tar archive in which each filename is preceded by "latest/"
# use zcat latest.tar.gz | git get-tar-commit-id to get the embeded git id 
alias gar="git archive --format=tar --prefix=latest/ HEAD | gzip >latest.tar.gz"
# rebase -> origin/master
alias gr="git fetch -v origin && git rebase origin/master"
# Merge without commit to inspect changes/merge-result.
alias gm="git merge --no-commit"
alias gfp="git format-patch -p"

# Usage
# (1) git diff -p --raw 35AC1F > c.pat
# (2) patch -f -p 1 < c.pat
alias gdp="git diff -p --raw"

# Pull --rebase
alias gp="git pull --rebase"

# git reflog
alias grl="git reflog"

# Untrack a file (If you want to keep a file, but not have it in the next revision).
alias gun="git rm --cached"

# show git aliases
alias galias="git config --global --get-regexp alias"

# shows what will be pushed to a remote repos
alias gpd="git push --dry-run"

alias gbl="git_blame_single_line"

alias gsb="git show-branch"

# vim: set filetype=bash
